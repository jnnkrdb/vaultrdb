--- # ------------------------------------------------------------- vaultrdb
apiVersion: v1
kind: Namespace
metadata:
  name: vaultrdb
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-vaultrdb
  namespace: vaultrdb
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: crb-vaultrdb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cr-vaultrdb
subjects:
  - kind: ServiceAccount
    name: sa-vaultrdb
    namespace: vaultrdb
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cr-vaultrdb
rules:
  # Get/Create/List/Delete Configmaps and Secrets
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["list", "get", "create", "update", "patch", "delete"]
  # Get/List vaultrdb.jnnkrdb.de
  - apiGroups: ["vaultrdb.jnnkrdb.de"]
    resources: ["vaultrequests"]
    verbs: ["list"]
---
apiVersion: v1
kind: Service
metadata:
  name: svc-vaultrdb
  namespace: vaultrdb
  labels:
    app: vaultrdb
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  type: ClusterIP
  selector:
    app: vaultrdb
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vaultrdb
  namespace: vaultrdb
  labels:
    app: vaultrdb
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
spec:
  ingressClassName: traefik
  rules:
  - host: vrdb.vrg.corp
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: svc-vaultrdb
            port:
              number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vaultrdb
  namespace: vaultrdb
  labels:
    app: vaultrdb
spec:
  selector:
    matchLabels:
      app: vaultrdb
  template:
    metadata:
      labels:
        app: vaultrdb
    spec:
      serviceAccountName: sa-vaultrdb
      containers:
      - name: vaultrdb
        image: docker.io/jnnkrdb/vaultrdb:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        # see in operator/go/settings/envs.go
        env: []
        envFrom:
        - secretRef:
            name: scrt-postgres-vaultrdb
        resources: {}
#          requests:
#            memory: "64Mi"
#            cpu: "250m"
#          limits:
#            memory: "128Mi"
#            cpu: "500m"
        livenessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          httpGet:
            path: /healthz/live
            port: 80
          failureThreshold: 5
        readinessProbe:
          initialDelaySeconds: 5
          periodSeconds: 5
          httpGet:
            path: /healthz/ready
            port: 80
          failureThreshold: 5
--- # ------------------------------------------------------------- postgres
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-vaultrdb
  namespace: vaultrdb
  labels:
    app: postgres-vaultrdb
spec:
  replicas: 1
  selector:
    matchLabels: 
      app: postgres-vaultrdb
  template:
    metadata:
      labels:
        app: postgres-vaultrdb
    spec:
      containers:
      - name: postgres
        image: postgres:14
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: scrt-postgres-vaultrdb
              key: PSQL_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources: {}
---
apiVersion: v1
kind: Service
metadata:
  name: svc-postgres-vaultrdb
  namespace: vaultrdb
  labels:
    app: postgres-vaultrdb
spec:
  ports:
  - name: postgres
    port: 5432
    protocol: TCP
    targetPort: 5432
  type: ClusterIP
  selector:
    app: postgres-vaultrdb
--- # ========================================= Secret
apiVersion: v1
kind: Secret
metadata:
  name: scrt-postgres-vaultrdb
  namespace: vaultrdb
type: Opaque
stringData:
  PSQL_USER: postgres
  PSQL_HOST: svc-postgres-vaultrdb.vaultrdb
  PSQL_PORT: "5432"
  PSQL_DATABASE: vault
  PSQL_PASSWORD: VlJHSVQxMjM0IQ